using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

using Rug.Cmd;
using Rug.Cmd.Colors;

namespace CmdCameraTrackSolver
{
	class Program
	{
		static StringArgument fpsArgument = new StringArgument("Fps", "Frames per second", "The frames per second of the footage.");
		static StringArgument trackFileArgument = new StringArgument("TrackFile", "Tracking file", "The path of the track file to generate a chan file for.");
		static StringArgument chanFileArgument = new StringArgument("ChanFile", "Channel File", "The path where to save the chan file data.");

		static double fps = 0.0;
		static string trackFilepath = "";
		static string chanFilepath = "";

		static void Main(string[] args)
		{
			ConsoleColorState state = RC.ColorState;

			System.Threading.Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");

			RC.Theme = ConsoleColorTheme.Load(ConsoleColorDefaultThemes.Colorful);

			try
			{
				ParseArguments(args);
				ParseTrackingFile();
			}
			catch (Exception e)
			{
				RC.WriteException(1, e);
				RC.PromptForKey("Press any key...", true, false);
			}

			//RC.WriteLine(fps.ToString());
			//RC.WriteLine(trackFilepath);
			//RC.WriteLine(chanFilepath);
			
			RC.ColorState = state;
		}

		static void ParseArguments(string[] args)
		{
			ArgumentParser parser = new ArgumentParser("CameraTrackSolver", "Uses track files generated by the CameraTrack app and solves a camera animation from that.");

			parser.AboutTitleText = "CameraTrack Solver";
			parser.AboutText = "Uses track files generated by the CameraTrack app and solves a camera animation from that.";
			parser.AboutTextLong = "foo";
			parser.CreditsText = "Copyright (C) 2016 Stefan Hahn";
			parser.LegalText = "BSD License";
			parser.HasApplicationDocument = true;

			parser.Add("/", "track", "Track", trackFileArgument);
			parser.Add("/", "chan", "Chan", chanFileArgument);
			parser.Add("/", "fps", "Fps", fpsArgument);

			parser.Parse(args);

			if (!parser.HelpMode)
			{
				if (!fpsArgument.Defined)
				{
					throw new ArgumentException("FPS argument missing", "fps");
				}

				if (!trackFileArgument.Defined)
				{
					throw new ArgumentException("Track file argument missing", "track");
				}

				if (!chanFileArgument.Defined)
				{
					throw new ArgumentException("Chan file argument missing", "chan");
				}

				fps = double.Parse(fpsArgument.Value);
				trackFilepath = trackFileArgument.Value;
				chanFilepath = chanFileArgument.Value;
			}
		}

		static void ParseTrackingFile()
		{
			TrackFileParser tfParser = new TrackFileParser(trackFilepath);
			ICameraTrackSolver solver = null;

			tfParser.Parse();

			if (tfParser.TrackFileType == TrackFileParser.CameraTrackerType.RL_DEFAULT)
			{
				solver = new RLCameraTrackSolver(tfParser, fps);
			}
			else
			{
				solver = new GAMCameraTrackSolver(tfParser, fps);
			}

			solver.Solve();
			solver.WriteTrackFile(chanFilepath);
		}
	}
}
