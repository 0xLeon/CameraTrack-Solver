using System;
using System.Text.RegularExpressions;

using Rug.Cmd;

using CameraTrackSolver.Parsers;
using CameraTrackSolver.Solvers;
using CameraTrackSolver.Exceptions;

namespace CameraTrackSolver
{
	class Program
	{
		static StringArgument fpsArgument = new StringArgument("Fps", "Frames per second", "The frames per second of the footage.");
		static StringArgument trackFileArgument = new StringArgument("TrackFile", "Tracking file", "The path of the track file to generate a chan file for.");
		static StringArgument chanFileArgument = new StringArgument("ChanFile", "Channel File", "The path where to save the chan file data.");

		static double fps = 0.0;
		static string trackFilepath = "";
		static string chanFilepath = "";

		static int Main(string[] args)
		{
			System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.GetCultureInfo("en-US");

			try
			{
				ParseArguments(ref args);
				ParseTrackingFile();
			}
			catch (Exception e)
			{
				RC.WriteException(1, e);

				return 1;
			}

			return 0;
		}

		static void ParseArguments(ref string[] args)
		{
			ArgumentParser parser = new ArgumentParser("CameraTrackSolver", "Uses track files generated by the CameraTrack app and solves a camera animation from that.");
			Regex cmdRegex = new Regex(@"'?(?<val>.*?)(?:'|$)");

			parser.AboutTitleText = "CameraTrack Solver";
			parser.AboutText = "Uses track files generated by the CameraTrack app and solves a camera animation from that.";
			parser.AboutTextLong = "foo";
			parser.CreditsText = "Copyright (C) 2016 Stefan Hahn";
			parser.LegalText = "BSD License";
			parser.HasApplicationDocument = true;

			parser.Add("/", "track", "Track", trackFileArgument);
			parser.Add("/", "chan", "Chan", chanFileArgument);
			parser.Add("/", "fps", "Fps", fpsArgument);

			parser.Parse(args);

			if (!parser.HelpMode)
			{
				if (!fpsArgument.Defined)
				{
					throw new ArgumentException("FPS argument missing", "fps");
				}

				if (!trackFileArgument.Defined)
				{
					throw new ArgumentException("Track file argument missing", "track");
				}

				if (!chanFileArgument.Defined)
				{
					throw new ArgumentException("Chan file argument missing", "chan");
				}

				fps = double.Parse(cmdRegex.Match(fpsArgument.Value).Groups["val"].Value);
				trackFilepath = cmdRegex.Match(trackFileArgument.Value).Groups["val"].Value;
				chanFilepath = cmdRegex.Match(chanFileArgument.Value).Groups["val"].Value;
			}
		}

		static void ParseTrackingFile()
		{
			TrackFileParser tfParser = new TrackFileParser(trackFilepath);
			ICameraTrackSolver solver = null;

			tfParser.Parse();

			switch (tfParser.TrackFileType)
			{
				case TrackFileParser.CameraTrackerType.RL_DEFAULT:
					solver = new RLCameraTrackSolver(tfParser, fps);
					break;
				case TrackFileParser.CameraTrackerType.GAM_DEFAULT:
				case TrackFileParser.CameraTrackerType.GAM_NATIVE:
					solver = new GAMCameraTrackSolver(tfParser, fps);
					break;
				default:
					throw new CameraTrackException("Unsupported tracker type");
			}

			solver.Solve();
			solver.WriteChanFile(chanFilepath);
#if DEBUG
			solver.WriteSensorDataFiles(chanFilepath);
#endif
		}
	}
}
